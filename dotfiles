#!/usr/bin/env bash

set -euo pipefail

source "$(dirname "${BASH_SOURCE[0]}")/dotfiles.conf"

function fail() {
    echo -e "${FAIL_PREFIX}" "${@}" >&2
    return 1
}

function help() {
    cat << EOF
${0} [OPTION]...
${0} SUBCOMMAND [ARG]...

Options:
    -h                    show help

Subcommands:
    git [ARG]...          manage repository
    init [CMD]...         initialize dotfiles
    stow [ARG]...         stow files
    sync [CMD]...         synchronize dotfiles (experimental)
EOF
}

function pass() {
    echo -e "${PASS_PREFIX}" "${@}" >&2
    return 0
}

function subcommand_git() {
    local work_tree="$(dirname "${BASH_SOURCE[0]}")"
    local git_dir="${work_tree}/.git"
    git --git-dir="${git_dir}" --work-tree="${work_tree}" "${@}"
}

function subcommand_init() {
    subcommand_stow
    subcommand_init_cmd "${@}"
}

function subcommand_init_cmd() {

    function list() {
        if [ ${#@} -gt 0 ]
        then
            for basename in "${@}"
            do
                echo "${basename}"
            done
        else
            ls "${script_dir}"
        fi
    }

    local script_dir="$(dirname "${BASH_SOURCE[0]}")/${SCRIPT_DIR}"

    for cmd in $(list "${@}")
    do
        local script="${script_dir}/${cmd}"

        if [ ! -x "${script}" ]
        then
            fail "init: ${cmd}: script not found"
        elif ! command -v "${cmd}" > /dev/null
        then
            fail "init: ${cmd}: command not found" || continue
        fi

        if "${script}"
        then
            pass "init: ${cmd}: done"
        else
            fail "init: ${cmd}: failed"
        fi
    done
}

subcommand_stow() {
    local directory="$(dirname "${BASH_SOURCE[0]}")"
    local args=(
        stow
        -d "$(dirname "${directory}")"
        -t "${HOME}"
        --ignore="${STOW_IGNORE_REGEX}"
        --override="${STOW_OVERRIDE_REGEX}"
        -v
        "${@}"
        "$(basename "${directory}")"
    )

    if "${args[@]}"
    then
        pass "stow: done"
    else
        fail "stow: failed"
    fi
}

function subcommand_sync() {
    subcommand_stow -D
    subcommand_git pull
    exec "${BASH_SOURCE[0]}" init
}

while getopts 'h' OPT
do
    case "${OPT}" in
        h)
            help
            exit 0
            ;;
    esac
done

shift $((OPTIND - 1))

if [ ${#@} -eq 0 ]
then
    help
    exit 1
fi

"subcommand_${1/-/_}" "${@:2}"
