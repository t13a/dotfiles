#!/bin/bash

set -euo pipefail

source "${BASH_SOURCE[0]}.conf"

function dest() {
    echo "${HOME}/${1}"
}

function echo_fail() {
    echo -e '[\033[1;31mFAIL\e[0m]' "${@}"
}

function echo_pass() {
    echo -e '[\033[1;32mPASS\e[0m]' "${@}"
}

function for_each() {
    local ret=0
    local file

    while read file
    do
        "${1}" "${file}" || ret=1
    done <<< "$(list "${@:2}")"

    return $ret
}

function help() {
    cat << EOF
${0} [OPTION]... SUBCOMMAND [DOTFILE]...

Options:
    -h              show help
    -l              print files

Subcommands:
    install         install
    status          show status
    uninstall       uninstall
EOF
}

function list() {
    local file
    local files

    if [ $# -gt 0 ]
    then
        files=("${@}")
    else
        files=("${DOTFILES[@]}")
    fi

    for file in "${files[@]}"
    do
        echo "${file}"
    done
}

function status() {
    local dest="$(dest "${1}")"
    local target_actual="$(target_actual "${1}")"
    local target_expect="$(target_expect "${1}")"

    if [ ! -e "${dest}" ]
    then
        echo_fail "${1}: not installed"
        return 1
    elif [ ! -L "${dest}" ]
    then
        echo_fail "${1}: file exists"
        return 2
    elif [ "${target_actual}" != "${target_expect}" ]
    then
        echo_fail "${1}: link exists: ${target_actual}"
        return 2
    else
        echo_pass "${1}: installed"
        return 0
    fi
}

function subcommand_install() {
    function f() {
        local dest="$(dest "${1}")"
        local target_expect="$(target_expect "${1}")"

        if status "${1}" > /dev/null
        then
            echo_pass "${1}"
            return 0
        elif install_link "${target_expect}" "${dest}"
        then
            echo_pass "${1}: installed"
            return 0
        else
            echo_fail "${1}"
            return 1
        fi
    }

    function install_link() {
        mkdir -p "$(dirname "${2}")"
        rm -rf "${2}"
        ln -sT "${1}" "${2}"
    }

    for_each f "${@}"
}

function subcommand_status() {
    for_each status "${@}"
}

function subcommand_uninstall() {
    function f() {
        local dest="$(dest "${1}")"

        if [ ! -e "${dest}" ]
        then
            echo_pass "${1}"
            return 0
        elif status "${1}" > /dev/null
        then
            if rm "${dest}"
            then
                echo_pass "${1}: uninstalled"
                return 0
            else
                echo_fail "${1}"
                return 1
            fi
        else
            echo_fail "${1}: could not uninstall"
            return 1
        fi
    }

    for_each f "${@}"
}

function target_actual() {
    readlink "$(dest "${1}")"
}

function target_expect() {
    realpath \
    --relative-to="$(dirname "$(dest "${1}")")" \
    "${DOTFILES_ROOT}/${1}"
}

while getopts 'hl' OPT
do
    case "${OPT}" in
        h)
            help
            exit 0
            ;;
        l)
            list
            exit 0
            ;;
    esac
done

shift $((OPTIND - 1))

"subcommand_${1//-/_}" "${@:2}"
